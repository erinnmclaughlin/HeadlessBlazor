@implements IAsyncDisposable
@code {
    private DotNetObjectReference<HBPopoverBehavior>? dotNetObjRef;
    private IJSObjectReference? popover;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    [Parameter]
    public IReferenceable Container { get; set; } = default!;

    public async ValueTask DisposeAsync()
    {
        if (popover is not null)
        {
            await popover.InvokeVoidAsync("dispose");
            await popover.DisposeAsync();
            popover = null;
        }

        dotNetObjRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetObjRef ??= DotNetObjectReference.Create(this);
            var moduleName = nameof(HBPopoverBehavior);
            var module = await JS.InvokeAsync<IJSObjectReference>("import", $"./_content/HeadlessBlazor.Core/Behaviors/{moduleName}.razor.js");
            popover = await module.InvokeAsync<IJSObjectReference>($"{moduleName}.createInstance", Container.ElementReference, dotNetObjRef);
            await module.DisposeAsync();
        }
    }
}