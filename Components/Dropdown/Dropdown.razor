<CascadingValue Value="this">
    <DropdownOverlay @ref="Overlay" OnClick="HandleClickOutside" />
    <div @attributes="UserAttributes">
        @ChildContent?.Invoke(this)
    </div>
</CascadingValue>

@code {
    public DropdownOverlay Overlay { get; private set; } = default!;

    public bool IsOpen { get; private set; }

    [Parameter]
    public RenderFragment<Dropdown>? ChildContent { get; set; }

    [Parameter]
    public EventCallback<Dropdown> OnClickOutside { get; set; }

    [Parameter]
    public EventCallback<DropdownItem> OnClickItem { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object?>? UserAttributes { get; set; }

    public async Task Toggle()  => await SetIsOpen(!IsOpen);
    public async Task Open()    => await SetIsOpen(true);
    public async Task Close()   => await SetIsOpen(false);

    private Task SetIsOpen(bool isOpen)
    {
        return InvokeAsync(() =>
        {
            IsOpen = isOpen;
            StateHasChanged();
        });
    }

    private async Task HandleClickOutside()
    {
        if (OnClickOutside.HasDelegate)
        {
            await OnClickOutside.InvokeAsync(this);
        }
        else
        {
            await Close();
        }
    }
}